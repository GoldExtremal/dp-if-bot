// src/handlers/callbackHandler.js
const { getUser, users } = require('../users');
const { hall, pickupOptions } = require('../hall');
const { getActionKeyboard, getCancelKeyboard, getPickupKeyboard, getSeatsKeyboard } = require('../keyboards');
const { sendHallScheme } = require('../messages');

// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –º–µ—Å—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ä—è–¥–∞
function sortSeatStringsByRow(seats) {
    return seats.slice().sort((a, b) => {
        const rowA = parseInt(a.match(/–†—è–¥ (\d+)/)?.[1] || 0, 10);
        const rowB = parseInt(b.match(/–†—è–¥ (\d+)/)?.[1] || 0, 10);
        return rowA - rowB;
    });
}

async function handleCallback(query, bot) {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const data = query.data;
    const user = getUser(chatId);

    await bot.answerCallbackQuery(query.id);

    // –í—ã–±–æ—Ä —Å–µ–∫—Ü–∏–∏ (—á–∏—Å–ª–æ)
    if (/^\d+$/.test(data)) {
        const sectionId = data;
        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        await bot.sendMessage(chatId, `–¢—ã –≤—ã–±—Ä–∞–ª(–∞) —Å–µ–∫—Ü–∏—é ${sectionId}, –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–æ–≤ —É–∫–∞–∑–∞–Ω—ã —Å–ª–µ–≤–∞\n\n‚ùå - –∑–∞–Ω—è—Ç–æ\n‚úÖ - —Å–≤–æ–±–æ–¥–Ω–æ\n‚óºÔ∏è - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–∞:`, { reply_markup: getSeatsKeyboard(sectionId, user) });
        return;
    }

    // –í—ã–±–æ—Ä –º–µ—Å—Ç–∞
    if (/^\d+-\d+-\d+$/.test(data)) {
        // --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ 10 –±–∏–ª–µ—Ç–æ–≤ ---
        if (user.selectedSeats.length >= 10) {
            return await bot.sendMessage(chatId, 'üö´ –ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ 10 –º–µ—Å—Ç!');
        }
        // --- –∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

        const [sectionId, rowNum, seatNum] = data.split('-').map(Number);
        const seat = hall[sectionId].rows[rowNum].find(s => s.number === seatNum);

        if (seat.status === '‚óºÔ∏è') return await bot.sendMessage(chatId, '–ú–µ—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üö´');
        if (seat.status === '‚ùå') return await bot.sendMessage(chatId, '–ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ üòî');

        seat.status = '‚ùå';
        user.selectedSeats.push(`–°–µ–∫—Ü–∏—è ${sectionId}, –†—è–¥ ${rowNum}, –ú–µ—Å—Ç–æ ${seatNum}`);

        await bot.editMessageReplyMarkup(getSeatsKeyboard(sectionId, user), { chat_id: chatId, message_id: messageId });
        await bot.sendMessage(chatId, `–¢—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª(–∞) —Ä—è–¥ ${rowNum}, –º–µ—Å—Ç–æ ${seatNum} ‚úÖ`);
        return;
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (data === 'finish_booking') {
        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        if (!user.selectedSeats.length) {
            await bot.sendMessage(chatId, '–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞. üòÖ');
            await bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', { reply_markup: getActionKeyboard() });
        } else {
            await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤:', { reply_markup: getPickupKeyboard(pickupOptions) });
        }
        return;
    }

    // –í—ã–±–æ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
    if (/^pickup_\d+$/.test(data)) {
        const index = Number(data.split('_')[1]);
        user.pickupOption = pickupOptions[index];
        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        await bot.sendSticker(chatId, 'https://cdn2.combot.org/siba_oscar/webp/62xf09fa4a9.webp');
        await bot.sendMessage(chatId, `–ó–∞–±–µ—Ä–µ—à—å –±–∏–ª–µ—Ç—ã –∑–¥–µ—Å—å:\n${user.pickupOption}`);
        await bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', { reply_markup: getActionKeyboard() });
        return;
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤
    if (data === 'all_tickets') {
        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        if (!user.selectedSeats.length) {
            await bot.sendMessage(chatId, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤. üòÖ');
        } else {
            const sortedSeats = sortSeatStringsByRow(user.selectedSeats);
            const seatsList = sortedSeats.map(seat => seat.replace(/–°–µ–∫—Ü–∏—è \d+, /, '')).join('\n');
            const pickup = user.pickupOption ? `\n\n–ú–µ—Å—Ç–æ –ø–æ–ª—É—á–µ–Ω–∏—è: \n${user.pickupOption}` : '';
            await bot.sendSticker(chatId, 'https://cdn2.combot.org/siba_oscar/webp/25xf09f9898.webp');
            await bot.sendMessage(chatId, `–í—Å–µ —Ç–≤–æ–∏ –±–∏–ª–µ—Ç—ã:\n\n${seatsList}${pickup}`);
        }
        await bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', { reply_markup: getActionKeyboard() });
        return;
    }

    // –û—Ç–º–µ–Ω–∞ –±–∏–ª–µ—Ç–æ–≤
    if (data === 'cancel_tickets') {
        if (!user.selectedSeats.length) {
            await bot.sendMessage(chatId, '–ù–µ—Ç –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã üòÖ');
            await bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', { reply_markup: getActionKeyboard() });
            return;
        }

        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        await bot.sendSticker(chatId, 'https://cdn2.combot.org/siba_oscar/webp/31xf09f98a2.webp');

        user.selectedSeats = sortSeatStringsByRow(user.selectedSeats);

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å:', {
            reply_markup: getCancelKeyboard(user)
        });

        return;
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞
    if (/^cancel_\d+$/.test(data)) {
        const index = Number(data.split('_')[1]);
        const seatText = user.selectedSeats[index];
        const match = seatText.match(/–°–µ–∫—Ü–∏—è (\d+), –†—è–¥ (\d+), –ú–µ—Å—Ç–æ (\d+)/);
        if (match) {
            const sectionId = Number(match[1]);
            const rowNum = Number(match[2]);
            const seatNum = Number(match[3]);
            const seat = hall[sectionId].rows[rowNum].find(s => s.number === seatNum);
            if (seat) seat.status = '‚úÖ';
        }
        user.selectedSeats.splice(index, 1);

        if (user.selectedSeats.length) {
            user.selectedSeats = sortSeatStringsByRow(user.selectedSeats);
            await bot.editMessageReplyMarkup(getCancelKeyboard(user), { chat_id: chatId, message_id: messageId });
        } else {
            await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
            await bot.sendSticker(chatId, 'https://cdn2.combot.org/siba_oscar/webp/75xf09f988e.webp');
            await bot.sendMessage(chatId, '–í—Å–µ –±–∏–ª–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã.');
            await bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', { reply_markup: getActionKeyboard() });
        }
        return;
    }

    if (data === 'back_to_actions') {
        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        await bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', { reply_markup: getActionKeyboard() });
    }

    if (data === 'book_more') {
        await bot.sendSticker(chatId, 'https://cdn2.combot.org/siba_oscar/webp/40xf09f988d.webp');
        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        await sendHallScheme(bot, chatId, getUser(chatId));
    }

    if (data === 'noop') return;

    if (data === 'back_to_sections') {
        await bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
        await sendHallScheme(bot, chatId, getUser(chatId));
        return;
    }

    if (data.startsWith('clearSeat_')) {
        const [, userId, ...seatParts] = data.split('_');
        const seat = seatParts.join('_');
        const u = users[userId];
        if (u) {
            u.selectedSeats = u.selectedSeats.filter(s => s !== seat);
        }

        const allSeats = [];
        for (const usr of Object.values(users)) {
            for (const s of usr.selectedSeats) {
                allSeats.push({ seat: s, userId: usr.id });
            }
        }

        if (!allSeats.length) {
            return await bot.editMessageText('–í—Å–µ –º–µ—Å—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã ‚úÖ', { chat_id: chatId, message_id: messageId });
        }

        const seatKeyboard = allSeats.map(s => [{ text: s.seat.replace(/–°–µ–∫—Ü–∏—è \d+, /, ''), callback_data: `clearSeat_${s.userId}_${s.seat}` }]);
        seatKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]);

        await bot.editMessageReplyMarkup({ inline_keyboard: seatKeyboard }, { chat_id: chatId, message_id: messageId });
        return;
    }

    if (data === 'back_to_menu') {
        await bot.editMessageText('–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: getActionKeyboard()
        });
        return;
    }
}

module.exports = {
    handleCallback
};
